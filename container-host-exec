#!/bin/sh

# Credit here goes to distrobox. This script is largely from them
# SPDX-License-Identifier: GPL-3.0-only
#
# This file is part of the distrobox project:
#    https://github.com/89luca89/distrobox
#
# Copyright (C) 2022 distrobox contributors
#
# distrobox is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# distrobox is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with distrobox; if not, see <http://www.gnu.org/licenses/>.

# Ensure we have our env variables correctly set
[ -z "${USER}" ] && USER="$(id -run)"
[ -z "${HOME}" ] && HOME="$(getent passwd "${USER}" | cut -d':' -f6)"
[ -z "${SHELL}" ] && SHELL="$(getent passwd "${USER}" | cut -d':' -f7)"

# Defaults
host_command=""
container_host_exec_default_command="${SHELL:-/bin/sh}"
host_spawn_version="v1.6.0"
verbose=0
version="1.8.0"

cachedirfile="${CONTAINER_HOST_EXEC_CACHE_DIR_FILE:-"$HOME/.cache/host_dir"}"

# show_help will print usage to stdout.
# Arguments:
#   None
# Expected global variables:
#   version: distrobox version
# Expected env variables:
#   None
# Outputs:
#   print usage with examples.
show_help() {
  cat <<EOF
distrobox version: ${version}

Usage:

	container-host-exec [command [arguments]]
	container-host-exec ls
	container-host-exec bash -l
	container-host-exec flatpak run org.mozilla.firefox
	container-host-exec podman ps -a


Options:

	--help/-h:		show this message
	--verbose/-v:		show more verbosity
	--version/-V:		show version
EOF
}

# If we're a symlink to a command, use that as command to exec, and skip arg parsing.
if [ "$(basename "${0}")" != "container-host-exec" ]; then
  host_command="$(basename "${0}")"
fi
# Parse arguments
if [ -z "${host_command}" ]; then
  # Skip argument parsing if we're a symlink
  while :; do
    case $1 in
    -h | --help)
      # Call a "show_help" function to display a synopsis, then exit.
      show_help
      exit 0
      ;;
    -v | --verbose)
      verbose=1
      shift
      ;;
    -V | --version)
      printf "distrobox: %s\n" "${version}"
      printf "host-spawn: %s\n" "${host_spawn_version}"
      exit 0
      ;;
    --) # End of all options.
      shift
      ;;
    -*) # Invalid options.
      printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
      show_help
      exit 1
      ;;
    *)
      if [ -n "$1" ]; then
        host_command=$1
        shift
      fi
      break
      ;;
    esac
  done
fi

set -o errexit
set -o nounset
# set verbosity
if [ "${verbose}" -ne 0 ]; then
  set -o xtrace
fi

# Check we're running inside a container and not on the host
if [ ! -f /run/.containerenv ] && [ ! -f /.dockerenv ] && [ -z "${container:-}" ]; then
  printf >&2 "You must run %s inside a container!\n" " $(basename "$0")"
  exit 126
fi

if [ -z "${host_command}" ]; then
  host_command="${container_host_exec_default_command}"
fi

# This makes host-spawn work on initful containers, where the dbus session is
# separate from the host, we point the dbus session straight to the host's socket
# in order to talk with the org.freedesktop.Flatpak.Development.HostCommand on the host
[ -z "${XDG_RUNTIME_DIR:-}" ] && XDG_RUNTIME_DIR="/run/user/$(id -ru)"
[ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ] && DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -ru)/bus"
XDG_RUNTIME_DIR="/run/host/${XDG_RUNTIME_DIR}"
DBUS_SESSION_BUS_ADDRESS="unix:path=/run/host/$(echo "${DBUS_SESSION_BUS_ADDRESS}" | cut -d '=' -f2-)"

###
# This workaround is needed because of a bug in gio (used by xdg-open) where
# a race condition happens when allocating a pty, leading to the command
# being killed before having time to be executed.
#
# https://gitlab.gnome.org/GNOME/glib/-/issues/2695
# https://github.com/1player/host-spawn/issues/7
#
# As an (ugly) workaround, we will not allocate a pty for those commands.
###
# Also, we don't initialize a pty, if we're not in a tty.
if [ "$(basename "${host_command}")" = "xdg-open" ] ||
  [ "$(basename "${host_command}")" = "gio" ] ||
  [ "$(basename "${host_command}")" = "flatpak" ] ||
  [ ! -t 1 ] ||
  ! tty >/dev/null 2>&1; then

  host-spawn --no-pty "${host_command}" "$@ && pwd > $cachedirfile"
  # Exit here, we don't continue execution
  exit $?
fi

host-spawn "${host_command}" "$@ && pwd > $cachedirfile"

# Exit here, we don't continue execution
exit $?
